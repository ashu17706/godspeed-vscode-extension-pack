{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Godspeed Workflow Delaration",
  "description": "A recipe for Godspeed workflow.",
  "type": "object",
  "properties": {
    "summary": {
      "type": "string",
      "title": "Title",
      "description": "Title of the workflow, meta info about the workflow",
      "default": "short summary of the workflow"
    },
    "description": {
      "type": "string",
      "title": "Description",
      "description": "Detail description of workflow",
      "default": "detailed description of workflow"
    },
    "id": {
      "type": "string",
      "title": "ID",
      "description": "Unique ID for the workflow, It is recommanded for better logging visibility.",
      "default": "workflow_unique_id"
    },
    "tasks": {
      "$ref": "#/definitions/tasks"
    },
    "on_error": {
      "$ref": "#/definitions/on_error"
    },
    "retry": {
      "$ref": "#/definitions/retry"
    }
  },
  "definitions": {
    "task": {
      "id": {
        "type": "string",
        "title": "Task ID",
        "description": "Unique task id"
      }
    },
    "tasks": {
      "type": "array",
      "title": "Tasks",
      "description": "The tasks (workflows or sub-workflows) to be run in series (sequence, or one by one). The tasks invoke other workflows written in YAML or JS/TS. \n Default value is `sequence`",
      "items": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "fn": {
            "type": "string",
            "oneOf": [
              {
                "const": "com.gs.http",
                "title": "HTTP",
                "description": "Call a third party api, or other microserive"
              },
              {
                "const": "com.gs.return",
                "title": "com.gs.return",
                "description": "Return the args"
              },
              {
                "const": "com.gs.log",
                "title": "com.gs.log",
                "description": "Log the args to console"
              },
              {
                "const": "com.gs.transform",
                "title": "Transform",
                "description": "This function allows to transform data from one format to another using coffee/js scripting."
              }
            ]
          },
          "on_error": {
            "$ref": "#/definitions/retry"
          }
        },
        "required": ["id", "fn"],
        "anyOf": [
          { "$ref": "#/definitions/com.gs.http" },
          { "$ref": "#/definitions/com.gs.return" },
          { "$ref": "#/definitions/com.gs.log" },
          { "$ref": "#/definitions/com.gs.transform" }
        ],

        "minItems": 1
      }
    },
    "on_error": {
      "type": "object",
      "properties": {
        "continue": {
          "type": "boolean",
          "default": true,
          "title": "Continue",
          "description": "Whether the next task should be executed, in case this wokflow/task fails."
        },
        "response": {
          "type": "string"
        }
      }
    },
    "retry": {
      "type": "object",
      "title": "Retry mechanism",
      "description": "Retry logic helps to handle transient failures, internal server errors, and network errors with support for constant, exponential and random types.\n`Currently applied only for com.gs.http workflow.`",
      "properties": {
        "max_attempts": {
          "type": "number",
          "default": 5
        },
        "type": {
          "type": "string",
          "enum": ["constant", "exponential", "random"],
          "default": "constant"
        },
        "interval": {
          "type": "string",
          "title": "Interval",
          "default": "PT15S"
        },
        "min_interval": {
          "title": "Min interval",
          "type": "string"
        },
        "max_interval": {
          "title": "Max interval",
          "type": "string"
        }
      },
      "required": ["type", "interval"]
    },
    "com.gs.http": {
      "type": "object",
      "required": ["args"],
      "properties": {
        "fn": {
          "const": "com.gs.http"
        },
        "params": {
          "type": ["object", "string"]
        },
        "args": {
          "type": ["object", "string"],
          "title": "args",
          "required": ["datasource", "config"],
          "default": { "datasource": {}, "config": {} },
          "properties": {
            "datasource": {
              "type": "string"
            },
            "config": {
              "type": "object",
              "required": ["url", "method"],
              "properties": {
                "url": {
                  "type": "string"
                },
                "method": {
                  "type": "string",
                  "enum": ["get", "put", "post", "delete", "options"]
                }
              }
            }
          }
        },
        "retry": {
          "$ref": "#/definitions/retry"
        }
      }
    },
    "com.gs.return": {
      "type": "object",
      "properties": {
        "fn": {
          "const": "com.gs.return"
        },
        "args": {
          "type": ["object", "string"]
        }
      },
      "required": ["args"]
    },
    "com.gs.log": {
      "type": "object",
      "properties": {
        "fn": {
          "const": "com.gs.log"
        },
        "args": {
          "type": "object"
        }
      }
    },
    "com.gs.transform": {
      "type": ["object", "string"],
      "properties": {
        "fn": {
          "const": "com.gs.transform"
        },
        "args": {
          "type": "object",
          "properties": {
            "code": {
              "type": "number"
            },
            "data": {
              "type": ["object", "string"]
            }
          }
        }
      }
    }
  },
  "additionalProperties": false
}
